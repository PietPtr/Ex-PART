hash in (26, 26) at (2, 2) {
    input data : UInt
    output hash_A : UInt
    output hash_B : UInt
    output hash_C : UInt
    output hash_D : UInt

    const_store is const_store in (8, 8) at (0, abcd.h)

    abcd is abcd_store in (20, 5) at (8, 0)
    calculator is calculator in (5, 5) at (abcd.x+abcd.w-5, abcd.h)
    fabcd is fabcd_update in (abcd.w-calculator.w, const_store.h) at (const_store.w, abcd.h)

    msg is message_store in (2, 2) at (fabcd.x + fabcd.w - 2, fabcd.y + fabcd.h - 2)

    abcd.out_A->fabcd.in_A
    abcd.out_B->fabcd.in_B
    abcd.out_C->fabcd.in_C
    abcd.out_D->fabcd.in_D
    const_store.s->fabcd.s
    const_store.k->fabcd.k
    msg.m->fabcd.mg
    calculator.out_F->fabcd.f
    
    calculator.out_g->msg.g
    const_store.out_i->calculator.i

    abcd.out_A->calculator.a
    abcd.out_B->calculator.b
    abcd.out_C->calculator.c
    abcd.out_D->calculator.d

    abcd.in_A<-fabcd.out_A
    abcd.in_B<-fabcd.out_B
    abcd.in_C<-fabcd.out_C
    abcd.in_D<-fabcd.out_D

    hash_A<-fabcd.out_A
    hash_B<-fabcd.out_B
    hash_C<-fabcd.out_C
    hash_D<-fabcd.out_D
}