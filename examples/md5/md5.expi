system in (21, 20) at (2, 2) {
    input data : Maybe UInt
    output hash : Maybe UInt

    -- Compile this design with "--lpf-allow-unconstrained" in Nextpnr.hs
    -- There aren't really 33 pins for input and output available on the ECP5
    -- So there should be some serdes stuff included as well, but that was
    -- not important for the research

    calculator is calculator in (10, 10) at (0, 0)
    const_store is const_store in (10, 15) at (0, 0)

    abcd is abcd_store in (fabcd.w, fabcd.h) at (fabcd.x, fabcd.y)
    fabcd is fabcd_update in (6, 20) at (const_store.w - 4, 0)

    msg is message_store in (const_store.w, const_store.h) at (0, 20 - const_store.h)

    data->msg.data_in

    abcd.enable<-const_store.is_hashing
    abcd.out_A->fabcd.in_A
    abcd.out_B->fabcd.in_B
    abcd.out_C->fabcd.in_C
    abcd.out_D->fabcd.in_D
    const_store.s->fabcd.s
    const_store.k->fabcd.k
    const_store.stall<-msg.stall
    msg.m->fabcd.mg
    calculator.out_F->fabcd.f
    
    calculator.out_g->msg.g
    const_store.out_i->calculator.i

    abcd.out_A->calculator.a
    abcd.out_B->calculator.b
    abcd.out_C->calculator.c
    abcd.out_D->calculator.d

    abcd.in_A<-fabcd.out_A
    abcd.in_B<-fabcd.out_B
    abcd.in_C<-fabcd.out_C
    abcd.in_D<-fabcd.out_D

    outputter is hash_output in (17 - const_store.w, 20) at (const_store.w, 0)
    outputter.a<-fabcd.out_A
    outputter.b<-fabcd.out_B
    outputter.c<-fabcd.out_C
    outputter.d<-fabcd.out_D
    outputter.ready<-const_store.ready

    hash<-outputter.hash_word
}