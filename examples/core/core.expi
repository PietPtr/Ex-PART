pru in (20, 20) at (2, 2) {
    output packet : Maybe Packet
    input north_i : Maybe Int8
    input east_i : Maybe Int8
    input south_i : Maybe Int8
    input west_i : Maybe Int8

    router.north_i<-north_i
    router.east_i<-east_i
    router.south_i<-south_i
    router.west_i<-west_i

    router.route_cmd->core.route_cmd
    router.ready_for_packet->core.read_packet
    core.packet->packet
    core.packet->router.packet_from_core

    router in (10, 10) at (core.x + core.w, 0) {
        input north_i : Maybe Int8
        input east_i : Maybe Int8
        input south_i : Maybe Int8
        input west_i : Maybe Int8

        output north_o : Maybe Int8
        output east_o : Maybe Int8
        output south_o : Maybe Int8
        output west_o : Maybe Int8

        output route_cmd : FIFOCommand
        output ready_for_packet : Bool
        input packet_from_core : Maybe Packet

        unplaced send_queue in (10, 10) {
            input packet : Maybe Packet
            output value : Maybe Int8

            queue is packet_queue in (10, 10) at (0, 0)
            serializer is pkt_ser in (10, 10) at (0, 0)

            queue.write<-write_to_send_queue
            queue.datain<-packet

            serializer.value->value
            serializer.packet<-queue.dataout
            serializer.empty_send_queue<-queue.empty
            serializer.read_from_send_queue->queue.read
        }

        repeat deserializers at (0, 0) {
            component = pkt_des in (10, 10),
            amount = 4,
            layout = horizontal
        }

        deserializers[1].value<-north_i
        deserializers[1].packet->dir_dec.from_north
        deserializers[2].value<-east_i
        deserializers[2].packet->dir_dec.from_east
        deserializers[3].value<-south_i
        deserializers[3].packet->dir_dec.from_south
        deserializers[4].value<-west_i
        deserializers[4].packet->dir_dec.from_west

        dir_dec is direction_decider in (10, 10) at (0, 0)
        dir_dec.ready->ready_for_packet
        dir_dec.to_proc->route_cmd
        dir_dec.my_x<-(1)
        dir_dec.my_y<-(1)
        dir_dec.from_core<-packet_from_core

        -- north_queue is send_queue in (10, 10) at (0, 0)
        -- north_queue.packet<-dir_dec.to_north
        -- north_queue.value->north_o

        repeat queues at (0, 0) {
            component = send_queue in (10, 10),
            amount = 4,
            layout = horizontal
        }

        queues[1].packet<-dir_dec.to_north
        queues[1].value->north_o
        queues[2].packet<-dir_dec.to_east
        queues[2].value->east_o
        queues[3].packet<-dir_dec.to_south
        queues[3].value->south_o
        queues[4].packet<-dir_dec.to_west
        queues[4].value->west_o

    }


    core in (10, 7) at (0, 0) {
        input route_cmd : FIFOCommand
        input read_packet : Bool
        output packet : Maybe Packet
        
        processing.instr<-progmem.instr
        processing.pc->progmem.pc

        processing in (4, 5) at (0, 0) {
            input instr : InstructionWord
            input fifo_val : Maybe Int8
            output pc : PC
            output fifo_cmd : FIFOCommand

            instr->datapath.instr_word
            datapath.fifo_cmd->fifo_cmd
            datapath.pc_out->pc

            regfile is registers in (processing.w, processing.h) at (0, 0)
            datapath is datapath in (processing.w, processing.h) at (0, 0)

            datapath.reg_a<-regfile.reg_a
            datapath.reg_b<-regfile.reg_b
            datapath.fifo_val<-fifo_val

            regfile.read_ids<-datapath.read_ids
            regfile.write<-datapath.update_regs
        }

        progmem is prog_mem in (1, processing.h) at (processing.w, 0)

        route_cmd->router_comm.route_cmd
        processing.fifo_cmd->router_comm.proc_cmd
        router_comm.packet->packet
        router_comm.read_packet<-read_packet
        processing.fifo_val<-router_comm.value

        router_comm in (5, processing.h) at (progmem.x + progmem.w, 0) {
            input proc_cmd : FIFOCommand
            input route_cmd : FIFOCommand
            input read_packet : Bool
            output value : Maybe Int8
            output packet : Maybe Packet

            ctrl is queue_controller in (5, router_comm.h) at (0, 0)
            ctrl.proc_cmd<-proc_cmd
            ctrl.route_cmd<-route_cmd
            ctrl.router_read<-read_packet

            in_queue is in_fifo in (ctrl.h + 1, ctrl.h) at (0, 0)
            in_queue.datain<-ctrl.incoming_datain
            in_queue.write<-ctrl.incoming_write
            in_queue.read<-ctrl.incoming_read
            ctrl.incoming_value<-in_queue.dataout
            value<-ctrl.read_value
            ctrl.incoming_empty<-in_queue.empty

            out_queue is packet_queue in (in_queue.w + progmem.w + processing.w, 6) at (-5, progmem.h)
            packet_control is packet_control in (out_queue.w, out_queue.h) at (out_queue.x, out_queue.y)
            packet_control.proc_cmd<-proc_cmd
            out_queue.datain<-packet_control.packet
            out_queue.read<-ctrl.outgoing_read
            out_queue.empty->ctrl.outgoing_empty
            out_queue.dataout->ctrl.outgoing_value
            packet<-ctrl.read_packet
        }

    }
}