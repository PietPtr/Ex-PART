haskell {

data State = Alive | Dead deriving (Show, Generic, NFDataX, Eq)

}


component wall() {
    output c : State

    c = Dead
}

component cell() {
    input n : State
    input ne : State
    input e : State
    input se : State
    input s : State
    input sw : State
    input w : State
    input nw : State

    state cell_state = Alive : State

    output lives : State

    lives = cell_state

    neighbor_count = 
        (if n == Alive then 1 else 0) +
        (if ne == Alive then 1 else 0) +
        (if e == Alive then 1 else 0) +
        (if se == Alive then 1 else 0) +
        (if s == Alive then 1 else 0) +
        (if sw == Alive then 1 else 0) +
        (if w == Alive then 1 else 0) +
        (if nw == Alive then 1 else 0)

    cell_state' = if cell_state == Alive
        then if (neighbor_count == 2) || (neighbor_count == 3)
            then Alive
            else Dead
        else if neighbor_count == 3
            then Alive
            else Dead
}

component grouper() {
    input in1 : State
    input in2 : State
    input in3 : State
    output o : Vec 3 State
    output c : State

    o = in1:>in2:>in3:>Nil
    c = Dead
}
