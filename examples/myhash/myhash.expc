combinatory {
type InWord = Unsigned 16
type MyHash = Unsigned 32

}

component const_store() {
    input i : Unsigned 3
    output k : Unsigned 8
    -- 7 LUTs, somehow
    
    k = store !! i

    store = 89:>201:>34:>235:>13:>248:>5:>253:>Nil
}

component inputter() {
    input word : Maybe InWord
    output hash : Maybe MyHash
    -- 0 LUTs, 0x0

    hash = case word of
        (Just w) -> Just $ resize w `shiftL` 16 .|. resize w
        Nothing -> Nothing
}
component calculate() {
    input word : Maybe MyHash
    input k : Unsigned 8
    state prev = Nothing : Maybe MyHash
    state ctr = 0 : Unsigned 4
    output hash : Maybe MyHash
    output i : Unsigned 3
    -- 15x10

    prev' = word
    ctr' = case word of
        (Just _) -> ctr + 1
        Nothing -> 0
    
    hash = case prev of
        (Just w) -> Just $ w `rotateL` (fromIntegral ctr) * (resize k + resize ctr)
        Nothing -> Nothing
    
    i = resize ctr
}

component hasher() {
    input partial_hash : Maybe MyHash
    state hash = Nothing : Maybe MyHash
    output final_hash : Maybe MyHash
    -- compounds stream of words to single value, and outputs that or nothing
    -- 5x4

    hash' = case partial_hash of
        Just h -> case hash of
            Just h' -> Just (h + h')
            Nothing -> Just h
        Nothing -> Nothing
        
    final_hash = case partial_hash of
        Just _ -> Nothing
        Nothing -> hash
}