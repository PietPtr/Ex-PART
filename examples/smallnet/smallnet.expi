pru in (20, 20) at (2, 2) {
    input left_in : Maybe Int8
    output left_out : Maybe Int8
    input right_in : Maybe Int8
    output right_out : Maybe Int8

    routers[1].west_i<-left_in
    routers[1].west_o->left_out
    routers[2].east_i<-right_in
    routers[2].east_o->right_out

    unplaced router in (14, 14) {
        input north_i : Maybe Int8
        input east_i : Maybe Int8
        input south_i : Maybe Int8
        input west_i : Maybe Int8

        output north_o : Maybe Int8
        output east_o : Maybe Int8
        output south_o : Maybe Int8
        output west_o : Maybe Int8

        output route_cmd : FIFOCommand
        output ready_for_packet : Bool
        input packet_from_core : Maybe Packet

        input my_x : Unsigned 4
        input my_y : Unsigned 4

        unplaced send_queue in (14, 14) {
            input packet : Maybe Packet
            output value : Maybe Int8

            queue is packet_queue in (14, 14) at (0, 0)
            serializer is pkt_ser in (14, 14) at (0, 0)

            queue.datain<-packet

            serializer.value->value
            serializer.packet<-queue.dataout
            serializer.empty_send_queue<-queue.empty
            serializer.read_from_send_queue->queue.read
        }

        repeat deserializers at (0, 0) {
            component = pkt_des in (14, 14),
            amount = 4,
            layout = identical
        }

        deserializers[1].value<-north_i
        deserializers[1].packet->dir_dec.from_north
        deserializers[2].value<-east_i
        deserializers[2].packet->dir_dec.from_east
        deserializers[3].value<-south_i
        deserializers[3].packet->dir_dec.from_south
        deserializers[4].value<-west_i
        deserializers[4].packet->dir_dec.from_west

        dir_dec is direction_decider in (14, 14) at (0, 0)
        dir_dec.ready->ready_for_packet
        dir_dec.to_proc->route_cmd
        dir_dec.my_x<-my_x
        dir_dec.my_y<-my_y
        dir_dec.from_core<-packet_from_core

        repeat queues at (0, 0) {
            component = send_queue in (14, 14),
            amount = 4,
            layout = identical
        }

        queues[1].packet<-dir_dec.to_north
        queues[1].value->north_o
        queues[2].packet<-dir_dec.to_east
        queues[2].value->east_o
        queues[3].packet<-dir_dec.to_south
        queues[3].value->south_o
        queues[4].packet<-dir_dec.to_west
        queues[4].value->west_o

    }

    chain routers at (0, 0) {
        component = router in (14, 14),
        amount = 2,
        layout = horizontal,
        chain_in = west_i,
        chain_out = east_o
    }

    routers[1].east_i<-routers[2].west_o
    
    routers[1].my_x<-(1)
    routers[1].my_y<-(1)
    routers[2].my_x<-(2)
    routers[2].my_y<-(1)

    repeat caps at (0, 0) {
        component = cap in (100, 80),
        amount = 4,
        layout = identical
    }

    caps[1-2]:to<-routers:north_o
    caps[1-2]:from->routers:north_i
    caps[3-4]:to<-routers:south_o
    caps[3-4]:from->routers:south_i

    repeat cores at (0, 0) {
        component = inactive_core in (100, 80),
        amount = 2,
        layout = identical
    }

    cores:pkt->routers:packet_from_core
    cores:route_cmd<-routers:route_cmd
    cores:ready_for_packet<-routers:ready_for_packet


}